@version: 3.19

# This config file is a PoC that will simply parse messages
# using a validated patterndb file, and send all unparsed (unknowns)
# messages to sequence, which in turn will produce a generated
# patterndb file
# It implements the logic depicted in the flowchart 'sequence syslog-ng.svg'
# 
# To generate the mock patterndb files, just type the following in a shell:
# 
# puppet module install ccin2p3/patterndb
# cd sequence/config
# puppet apply patterndb.pp
# mkdir /var/tmp/sequence_to_review
# syslog-ng -R /tmp/R -p /tmp/p -c /tmp/c -f syslog-ng-example.conf -vF&
# tail -F /var/tmp/syslog-out.log /var/tmp/processed_by_sequence.log /var/tmp/sequence_to_review/*.log&
# echo sshd this is a known already promoted message >> /var/tmp/syslog-in.log
# echo sshd that is a message sequence already knows about >> /var/tmp/syslog-in.log
# echo sshd new unknown message >> /var/tmp/syslog-in.log

source s_system {
  file("/var/tmp/syslog-in.log" flags(no-hostname));
};

destination d_sequence {
  program("./mock_sequence analyze -i /dev/stdin" template("$PROGRAM $MESSAGE\n"));
};

destination d_messages {
  file("/var/tmp/syslog-out.log" template("$PROGRAM $MESSAGE (${.classifier.class})\n"));
};

destination d_review {
  file("/var/tmp/sequence_to_review/${PROGRAM}.log" create-dirs(yes) template("$(format-json -s all-nv-pairs)\n"));
};

parser generated {
  db-parser(file("/tmp/etc/syslog-ng/patterndb.d/default/generated.pdb"));
};

parser promoted {
  db-parser(file("/tmp/etc/syslog-ng/patterndb.d/default/promoted.pdb"));
};

filter f_unknown {
  tags(".classifier.unknown");
};

log {
  source(s_system);
  parser(promoted);

  if (filter(f_unknown)) { 
    parser(generated);
    if (filter(f_unknown)) {
      destination(d_sequence);
    } else {
      destination(d_review);
    };
  };
  destination(d_messages);
};

