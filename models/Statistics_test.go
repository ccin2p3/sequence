// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStatistics(t *testing.T) {
	t.Parallel()

	query := Statistics()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStatisticsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Statistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatisticsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Statistics().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Statistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatisticsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StatisticSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Statistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatisticsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StatisticExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Statistic exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StatisticExists to return true, but got false.")
	}
}

func testStatisticsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	statisticFound, err := FindStatistic(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if statisticFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStatisticsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Statistics().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStatisticsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Statistics().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStatisticsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statisticOne := &Statistic{}
	statisticTwo := &Statistic{}
	if err = randomize.Struct(seed, statisticOne, statisticDBTypes, false, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}
	if err = randomize.Struct(seed, statisticTwo, statisticDBTypes, false, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = statisticOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = statisticTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Statistics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStatisticsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	statisticOne := &Statistic{}
	statisticTwo := &Statistic{}
	if err = randomize.Struct(seed, statisticOne, statisticDBTypes, false, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}
	if err = randomize.Struct(seed, statisticTwo, statisticDBTypes, false, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = statisticOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = statisticTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Statistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func statisticBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func testStatisticsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Statistic{}
	o := &Statistic{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, statisticDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Statistic object: %s", err)
	}

	AddStatisticHook(boil.BeforeInsertHook, statisticBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	statisticBeforeInsertHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterInsertHook, statisticAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	statisticAfterInsertHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterSelectHook, statisticAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	statisticAfterSelectHooks = []StatisticHook{}

	AddStatisticHook(boil.BeforeUpdateHook, statisticBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	statisticBeforeUpdateHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterUpdateHook, statisticAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	statisticAfterUpdateHooks = []StatisticHook{}

	AddStatisticHook(boil.BeforeDeleteHook, statisticBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	statisticBeforeDeleteHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterDeleteHook, statisticAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	statisticAfterDeleteHooks = []StatisticHook{}

	AddStatisticHook(boil.BeforeUpsertHook, statisticBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	statisticBeforeUpsertHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterUpsertHook, statisticAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	statisticAfterUpsertHooks = []StatisticHook{}
}

func testStatisticsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Statistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStatisticsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(statisticColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Statistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStatisticToOnePatternUsingPattern(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Statistic
	var foreign Pattern

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, statisticDBTypes, false, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, patternDBTypes, false, patternColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pattern struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PatternID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pattern().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StatisticSlice{&local}
	if err = local.L.LoadPattern(ctx, tx, false, (*[]*Statistic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pattern == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pattern = nil
	if err = local.L.LoadPattern(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pattern == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStatisticToOneSetOpPatternUsingPattern(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Statistic
	var b, c Pattern

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, statisticDBTypes, false, strmangle.SetComplement(statisticPrimaryKeyColumns, statisticColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, patternDBTypes, false, strmangle.SetComplement(patternPrimaryKeyColumns, patternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, patternDBTypes, false, strmangle.SetComplement(patternPrimaryKeyColumns, patternColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Pattern{&b, &c} {
		err = a.SetPattern(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pattern != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PatternStatistics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PatternID != x.ID {
			t.Error("foreign key was wrong value", a.PatternID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PatternID))
		reflect.Indirect(reflect.ValueOf(&a.PatternID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PatternID != x.ID {
			t.Error("foreign key was wrong value", a.PatternID, x.ID)
		}
	}
}

func testStatisticsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStatisticsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StatisticSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStatisticsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Statistics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	statisticDBTypes = map[string]string{`ID`: `INTEGER`, `PatternID`: `STRING (20, 50)`, `DateLastMatched`: `DATETIME`, `OriginalMatchCount`: `INTEGER`, `CumulativeMatchCount`: `BIGINT`}
	_                = bytes.MinRead
)

func testStatisticsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(statisticPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(statisticColumns) == len(statisticPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Statistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStatisticsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(statisticColumns) == len(statisticPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Statistic{}
	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Statistics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, statisticDBTypes, true, statisticPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(statisticColumns, statisticPrimaryKeyColumns) {
		fields = statisticColumns
	} else {
		fields = strmangle.SetComplement(
			statisticColumns,
			statisticPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StatisticSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
