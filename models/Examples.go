// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Example is an object representing the database table.
type Example struct {
	ID            null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	PatternID     string     `boil:"pattern_id" json:"pattern_id" toml:"pattern_id" yaml:"pattern_id"`
	ExampleDetail string     `boil:"example_detail" json:"example_detail" toml:"example_detail" yaml:"example_detail"`

	R *exampleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exampleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExampleColumns = struct {
	ID            string
	PatternID     string
	ExampleDetail string
}{
	ID:            "id",
	PatternID:     "pattern_id",
	ExampleDetail: "example_detail",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ExampleWhere = struct {
	ID            whereHelpernull_Int64
	PatternID     whereHelperstring
	ExampleDetail whereHelperstring
}{
	ID:            whereHelpernull_Int64{field: `id`},
	PatternID:     whereHelperstring{field: `pattern_id`},
	ExampleDetail: whereHelperstring{field: `example_detail`},
}

// ExampleRels is where relationship names are stored.
var ExampleRels = struct {
	Pattern string
}{
	Pattern: "Pattern",
}

// exampleR is where relationships are stored.
type exampleR struct {
	Pattern *Pattern
}

// NewStruct creates a new relationship struct
func (*exampleR) NewStruct() *exampleR {
	return &exampleR{}
}

// exampleL is where Load methods for each relationship are stored.
type exampleL struct{}

var (
	exampleColumns               = []string{"id", "pattern_id", "example_detail"}
	exampleColumnsWithoutDefault = []string{"pattern_id", "example_detail"}
	exampleColumnsWithDefault    = []string{"id"}
	examplePrimaryKeyColumns     = []string{"id"}
)

type (
	// ExampleSlice is an alias for a slice of pointers to Example.
	// This should generally be used opposed to []Example.
	ExampleSlice []*Example
	// ExampleHook is the signature for custom Example hook methods
	ExampleHook func(context.Context, boil.ContextExecutor, *Example) error

	exampleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exampleType                 = reflect.TypeOf(&Example{})
	exampleMapping              = queries.MakeStructMapping(exampleType)
	examplePrimaryKeyMapping, _ = queries.BindMapping(exampleType, exampleMapping, examplePrimaryKeyColumns)
	exampleInsertCacheMut       sync.RWMutex
	exampleInsertCache          = make(map[string]insertCache)
	exampleUpdateCacheMut       sync.RWMutex
	exampleUpdateCache          = make(map[string]updateCache)
	exampleUpsertCacheMut       sync.RWMutex
	exampleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var exampleBeforeInsertHooks []ExampleHook
var exampleBeforeUpdateHooks []ExampleHook
var exampleBeforeDeleteHooks []ExampleHook
var exampleBeforeUpsertHooks []ExampleHook

var exampleAfterInsertHooks []ExampleHook
var exampleAfterSelectHooks []ExampleHook
var exampleAfterUpdateHooks []ExampleHook
var exampleAfterDeleteHooks []ExampleHook
var exampleAfterUpsertHooks []ExampleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Example) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exampleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Example) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exampleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Example) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exampleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Example) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exampleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Example) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exampleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Example) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exampleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Example) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exampleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Example) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exampleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Example) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exampleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExampleHook registers your hook function for all future operations.
func AddExampleHook(hookPoint boil.HookPoint, exampleHook ExampleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		exampleBeforeInsertHooks = append(exampleBeforeInsertHooks, exampleHook)
	case boil.BeforeUpdateHook:
		exampleBeforeUpdateHooks = append(exampleBeforeUpdateHooks, exampleHook)
	case boil.BeforeDeleteHook:
		exampleBeforeDeleteHooks = append(exampleBeforeDeleteHooks, exampleHook)
	case boil.BeforeUpsertHook:
		exampleBeforeUpsertHooks = append(exampleBeforeUpsertHooks, exampleHook)
	case boil.AfterInsertHook:
		exampleAfterInsertHooks = append(exampleAfterInsertHooks, exampleHook)
	case boil.AfterSelectHook:
		exampleAfterSelectHooks = append(exampleAfterSelectHooks, exampleHook)
	case boil.AfterUpdateHook:
		exampleAfterUpdateHooks = append(exampleAfterUpdateHooks, exampleHook)
	case boil.AfterDeleteHook:
		exampleAfterDeleteHooks = append(exampleAfterDeleteHooks, exampleHook)
	case boil.AfterUpsertHook:
		exampleAfterUpsertHooks = append(exampleAfterUpsertHooks, exampleHook)
	}
}

// One returns a single example record from the query.
func (q exampleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Example, error) {
	o := &Example{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Examples")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Example records from the query.
func (q exampleQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExampleSlice, error) {
	var o []*Example

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Example slice")
	}

	if len(exampleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Example records in the query.
func (q exampleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Examples rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q exampleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Examples exists")
	}

	return count > 0, nil
}

// Pattern pointed to by the foreign key.
func (o *Example) Pattern(mods ...qm.QueryMod) patternQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PatternID),
	}

	queryMods = append(queryMods, mods...)

	query := Patterns(queryMods...)
	queries.SetFrom(query.Query, "\"Patterns\"")

	return query
}

// LoadPattern allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (exampleL) LoadPattern(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExample interface{}, mods queries.Applicator) error {
	var slice []*Example
	var object *Example

	if singular {
		object = maybeExample.(*Example)
	} else {
		slice = *maybeExample.(*[]*Example)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exampleR{}
		}
		args = append(args, object.PatternID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exampleR{}
			}

			for _, a := range args {
				if a == obj.PatternID {
					continue Outer
				}
			}

			args = append(args, obj.PatternID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Patterns`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pattern")
	}

	var resultSlice []*Pattern
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pattern")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Patterns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Patterns")
	}

	if len(exampleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pattern = foreign
		if foreign.R == nil {
			foreign.R = &patternR{}
		}
		foreign.R.PatternExamples = append(foreign.R.PatternExamples, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PatternID == foreign.ID {
				local.R.Pattern = foreign
				if foreign.R == nil {
					foreign.R = &patternR{}
				}
				foreign.R.PatternExamples = append(foreign.R.PatternExamples, local)
				break
			}
		}
	}

	return nil
}

// SetPattern of the example to the related item.
// Sets o.R.Pattern to related.
// Adds o to related.R.PatternExamples.
func (o *Example) SetPattern(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pattern) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Examples\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"pattern_id"}),
		strmangle.WhereClause("\"", "\"", 0, examplePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PatternID = related.ID
	if o.R == nil {
		o.R = &exampleR{
			Pattern: related,
		}
	} else {
		o.R.Pattern = related
	}

	if related.R == nil {
		related.R = &patternR{
			PatternExamples: ExampleSlice{o},
		}
	} else {
		related.R.PatternExamples = append(related.R.PatternExamples, o)
	}

	return nil
}

// Examples retrieves all the records using an executor.
func Examples(mods ...qm.QueryMod) exampleQuery {
	mods = append(mods, qm.From("\"Examples\""))
	return exampleQuery{NewQuery(mods...)}
}

// FindExample retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExample(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Example, error) {
	exampleObj := &Example{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Examples\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, exampleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Examples")
	}

	return exampleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Example) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Examples provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exampleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exampleInsertCacheMut.RLock()
	cache, cached := exampleInsertCache[key]
	exampleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exampleColumns,
			exampleColumnsWithDefault,
			exampleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exampleType, exampleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exampleType, exampleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Examples\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Examples\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"Examples\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, examplePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Examples")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Examples")
	}

CacheNoHooks:
	if !cached {
		exampleInsertCacheMut.Lock()
		exampleInsertCache[key] = cache
		exampleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Example.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Example) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	exampleUpdateCacheMut.RLock()
	cache, cached := exampleUpdateCache[key]
	exampleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exampleColumns,
			examplePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Examples, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Examples\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, examplePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exampleType, exampleMapping, append(wl, examplePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Examples row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Examples")
	}

	if !cached {
		exampleUpdateCacheMut.Lock()
		exampleUpdateCache[key] = cache
		exampleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q exampleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Examples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Examples")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExampleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Examples\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examplePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in example slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all example")
	}
	return rowsAff, nil
}

// Delete deletes a single Example record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Example) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Example provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examplePrimaryKeyMapping)
	sql := "DELETE FROM \"Examples\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Examples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Examples")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exampleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no exampleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Examples")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Examples")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExampleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Example slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(exampleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Examples\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examplePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from example slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Examples")
	}

	if len(exampleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Example) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExample(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExampleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExampleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examplePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Examples\".* FROM \"Examples\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examplePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExampleSlice")
	}

	*o = slice

	return nil
}

// ExampleExists checks if the Example row exists.
func ExampleExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Examples\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Examples exists")
	}

	return exists, nil
}
