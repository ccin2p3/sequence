// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Statistic is an object representing the database table.
type Statistic struct {
	ID                   null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	PatternID            string     `boil:"pattern_id" json:"pattern_id" toml:"pattern_id" yaml:"pattern_id"`
	DateLastMatched      time.Time  `boil:"date_last_matched" json:"date_last_matched" toml:"date_last_matched" yaml:"date_last_matched"`
	OriginalMatchCount   int64      `boil:"original_match_count" json:"original_match_count" toml:"original_match_count" yaml:"original_match_count"`
	CumulativeMatchCount int64      `boil:"cumulative_match_count" json:"cumulative_match_count" toml:"cumulative_match_count" yaml:"cumulative_match_count"`

	R *statisticR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L statisticL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StatisticColumns = struct {
	ID                   string
	PatternID            string
	DateLastMatched      string
	OriginalMatchCount   string
	CumulativeMatchCount string
}{
	ID:                   "id",
	PatternID:            "pattern_id",
	DateLastMatched:      "date_last_matched",
	OriginalMatchCount:   "original_match_count",
	CumulativeMatchCount: "cumulative_match_count",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var StatisticWhere = struct {
	ID                   whereHelpernull_Int64
	PatternID            whereHelperstring
	DateLastMatched      whereHelpertime_Time
	OriginalMatchCount   whereHelperint64
	CumulativeMatchCount whereHelperint64
}{
	ID:                   whereHelpernull_Int64{field: `id`},
	PatternID:            whereHelperstring{field: `pattern_id`},
	DateLastMatched:      whereHelpertime_Time{field: `date_last_matched`},
	OriginalMatchCount:   whereHelperint64{field: `original_match_count`},
	CumulativeMatchCount: whereHelperint64{field: `cumulative_match_count`},
}

// StatisticRels is where relationship names are stored.
var StatisticRels = struct {
	Pattern string
}{
	Pattern: "Pattern",
}

// statisticR is where relationships are stored.
type statisticR struct {
	Pattern *Pattern
}

// NewStruct creates a new relationship struct
func (*statisticR) NewStruct() *statisticR {
	return &statisticR{}
}

// statisticL is where Load methods for each relationship are stored.
type statisticL struct{}

var (
	statisticColumns               = []string{"id", "pattern_id", "date_last_matched", "original_match_count", "cumulative_match_count"}
	statisticColumnsWithoutDefault = []string{"pattern_id", "date_last_matched", "original_match_count", "cumulative_match_count"}
	statisticColumnsWithDefault    = []string{"id"}
	statisticPrimaryKeyColumns     = []string{"id"}
)

type (
	// StatisticSlice is an alias for a slice of pointers to Statistic.
	// This should generally be used opposed to []Statistic.
	StatisticSlice []*Statistic
	// StatisticHook is the signature for custom Statistic hook methods
	StatisticHook func(context.Context, boil.ContextExecutor, *Statistic) error

	statisticQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	statisticType                 = reflect.TypeOf(&Statistic{})
	statisticMapping              = queries.MakeStructMapping(statisticType)
	statisticPrimaryKeyMapping, _ = queries.BindMapping(statisticType, statisticMapping, statisticPrimaryKeyColumns)
	statisticInsertCacheMut       sync.RWMutex
	statisticInsertCache          = make(map[string]insertCache)
	statisticUpdateCacheMut       sync.RWMutex
	statisticUpdateCache          = make(map[string]updateCache)
	statisticUpsertCacheMut       sync.RWMutex
	statisticUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var statisticBeforeInsertHooks []StatisticHook
var statisticBeforeUpdateHooks []StatisticHook
var statisticBeforeDeleteHooks []StatisticHook
var statisticBeforeUpsertHooks []StatisticHook

var statisticAfterInsertHooks []StatisticHook
var statisticAfterSelectHooks []StatisticHook
var statisticAfterUpdateHooks []StatisticHook
var statisticAfterDeleteHooks []StatisticHook
var statisticAfterUpsertHooks []StatisticHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Statistic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statisticBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Statistic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statisticBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Statistic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statisticBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Statistic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statisticBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Statistic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statisticAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Statistic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statisticAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Statistic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statisticAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Statistic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statisticAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Statistic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statisticAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStatisticHook registers your hook function for all future operations.
func AddStatisticHook(hookPoint boil.HookPoint, statisticHook StatisticHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		statisticBeforeInsertHooks = append(statisticBeforeInsertHooks, statisticHook)
	case boil.BeforeUpdateHook:
		statisticBeforeUpdateHooks = append(statisticBeforeUpdateHooks, statisticHook)
	case boil.BeforeDeleteHook:
		statisticBeforeDeleteHooks = append(statisticBeforeDeleteHooks, statisticHook)
	case boil.BeforeUpsertHook:
		statisticBeforeUpsertHooks = append(statisticBeforeUpsertHooks, statisticHook)
	case boil.AfterInsertHook:
		statisticAfterInsertHooks = append(statisticAfterInsertHooks, statisticHook)
	case boil.AfterSelectHook:
		statisticAfterSelectHooks = append(statisticAfterSelectHooks, statisticHook)
	case boil.AfterUpdateHook:
		statisticAfterUpdateHooks = append(statisticAfterUpdateHooks, statisticHook)
	case boil.AfterDeleteHook:
		statisticAfterDeleteHooks = append(statisticAfterDeleteHooks, statisticHook)
	case boil.AfterUpsertHook:
		statisticAfterUpsertHooks = append(statisticAfterUpsertHooks, statisticHook)
	}
}

// One returns a single statistic record from the query.
func (q statisticQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Statistic, error) {
	o := &Statistic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Statistics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Statistic records from the query.
func (q statisticQuery) All(ctx context.Context, exec boil.ContextExecutor) (StatisticSlice, error) {
	var o []*Statistic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Statistic slice")
	}

	if len(statisticAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Statistic records in the query.
func (q statisticQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Statistics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q statisticQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Statistics exists")
	}

	return count > 0, nil
}

// Pattern pointed to by the foreign key.
func (o *Statistic) Pattern(mods ...qm.QueryMod) patternQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PatternID),
	}

	queryMods = append(queryMods, mods...)

	query := Patterns(queryMods...)
	queries.SetFrom(query.Query, "\"Patterns\"")

	return query
}

// LoadPattern allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (statisticL) LoadPattern(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStatistic interface{}, mods queries.Applicator) error {
	var slice []*Statistic
	var object *Statistic

	if singular {
		object = maybeStatistic.(*Statistic)
	} else {
		slice = *maybeStatistic.(*[]*Statistic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &statisticR{}
		}
		args = append(args, object.PatternID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &statisticR{}
			}

			for _, a := range args {
				if a == obj.PatternID {
					continue Outer
				}
			}

			args = append(args, obj.PatternID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Patterns`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pattern")
	}

	var resultSlice []*Pattern
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pattern")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Patterns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Patterns")
	}

	if len(statisticAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pattern = foreign
		if foreign.R == nil {
			foreign.R = &patternR{}
		}
		foreign.R.PatternStatistics = append(foreign.R.PatternStatistics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PatternID == foreign.ID {
				local.R.Pattern = foreign
				if foreign.R == nil {
					foreign.R = &patternR{}
				}
				foreign.R.PatternStatistics = append(foreign.R.PatternStatistics, local)
				break
			}
		}
	}

	return nil
}

// SetPattern of the statistic to the related item.
// Sets o.R.Pattern to related.
// Adds o to related.R.PatternStatistics.
func (o *Statistic) SetPattern(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pattern) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Statistics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"pattern_id"}),
		strmangle.WhereClause("\"", "\"", 0, statisticPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PatternID = related.ID
	if o.R == nil {
		o.R = &statisticR{
			Pattern: related,
		}
	} else {
		o.R.Pattern = related
	}

	if related.R == nil {
		related.R = &patternR{
			PatternStatistics: StatisticSlice{o},
		}
	} else {
		related.R.PatternStatistics = append(related.R.PatternStatistics, o)
	}

	return nil
}

// Statistics retrieves all the records using an executor.
func Statistics(mods ...qm.QueryMod) statisticQuery {
	mods = append(mods, qm.From("\"Statistics\""))
	return statisticQuery{NewQuery(mods...)}
}

// FindStatistic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStatistic(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Statistic, error) {
	statisticObj := &Statistic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Statistics\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, statisticObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Statistics")
	}

	return statisticObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Statistic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Statistics provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statisticColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	statisticInsertCacheMut.RLock()
	cache, cached := statisticInsertCache[key]
	statisticInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			statisticColumns,
			statisticColumnsWithDefault,
			statisticColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(statisticType, statisticMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(statisticType, statisticMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Statistics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Statistics\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"Statistics\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, statisticPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Statistics")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Statistics")
	}

CacheNoHooks:
	if !cached {
		statisticInsertCacheMut.Lock()
		statisticInsertCache[key] = cache
		statisticInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Statistic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Statistic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	statisticUpdateCacheMut.RLock()
	cache, cached := statisticUpdateCache[key]
	statisticUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			statisticColumns,
			statisticPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Statistics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Statistics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, statisticPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(statisticType, statisticMapping, append(wl, statisticPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Statistics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Statistics")
	}

	if !cached {
		statisticUpdateCacheMut.Lock()
		statisticUpdateCache[key] = cache
		statisticUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q statisticQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Statistics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Statistics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StatisticSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statisticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Statistics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statisticPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in statistic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all statistic")
	}
	return rowsAff, nil
}

// Delete deletes a single Statistic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Statistic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Statistic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), statisticPrimaryKeyMapping)
	sql := "DELETE FROM \"Statistics\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Statistics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Statistics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q statisticQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no statisticQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Statistics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Statistics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StatisticSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Statistic slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(statisticBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statisticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Statistics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statisticPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from statistic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Statistics")
	}

	if len(statisticAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Statistic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStatistic(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StatisticSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StatisticSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statisticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Statistics\".* FROM \"Statistics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statisticPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StatisticSlice")
	}

	*o = slice

	return nil
}

// StatisticExists checks if the Statistic row exists.
func StatisticExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Statistics\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Statistics exists")
	}

	return exists, nil
}
